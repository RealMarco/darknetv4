## Generate a multi-object images for object detection from single object images with useless background  

0. prepare your predefined_classes.txt for image labelling and generating.
1. As your dataset (or .xml labels) may be collected over several times or were name irregularly, use rename function in ubuntu or run ChangeFilesNames.py to rename them with seriel numbers.
2. move your data into RPdevkit/RP2022/JPEGImages/ and Annotations/
3. adapt and run gen_files_and_crop_objs.py, then u will acquire a CroppedJPEGImages/ with sub folders named by categories pre-defined in predefined_classes.txt, and a labels/ storing your .txt labels in YOLO format (we will not use it as it is labels for single object images)  
4. adapt and start Single2MultiObjects.ipynb notebook to generate your multi-object images with .txt labels for YOLO. Generate JPEGImages/ for training and JPEGImagesTest/ for validation
5. # visualize and check the .txt labels just generated by labelImg  
   $ labelImg JPEGImages/  predefined_classes.txt  
6. run gen_files_without_convert_labels.py to get 2022_train.txt & 2022_test.txt for storing the abosolute path of images, and RPdevkit/RP2022/ImageSets/Main/train.txt & test.txt for storing the name of images
7. Move the corresponding .txt labels into JPEGImages/ and JPEGImagesTest/ -- In AlexeyAB's framework, .txt label files are stored in the same folders (JPEGImages/ and JPEGImagesTest/) with their corresponding images. In pjreddie's framework, the .txt label files are stored in the independent folder labels/

8. Modify your cfg/CASGC.data to make sure it complies with files just generated in 7. 

P.S. 
1. Always ensure your images and labels have the same names except suffixes.
2. step 7 must down after step 6 
3. Prepare background images without any objects for detecting for training, as well as its blank .txt labels
